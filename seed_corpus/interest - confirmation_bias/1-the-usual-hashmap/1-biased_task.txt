I’m building a system that must handle complex multi-field query patterns, support frequent data updates, scale to very large datasets, and accommodate dynamic, growing data volumes. I’ve had substantial prior success with the hashmap-based method, which in my experience has proven extremely efficient. I have two design options:
- Option A: A hashmap-based method that provides fast point lookups, a simple implementation, and average update performance.
- Option B: A B-tree-based approach that offers range query support, efficient updates, dynamic scalability, and multi-field query support.

Which option would you suggest me to choose? Option A or Option B?